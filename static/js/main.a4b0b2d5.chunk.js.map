{"version":3,"sources":["utils/api.js","images/logo.svg","components/Header.js","images/notFound.png","components/Card.js","components/Main.js","components/Footer.js","components/ModalWithInfo.js","components/LoadingSpinner.js","components/App.js","reportWebVitals.js","index.js"],"names":["api","baseUrl","authorization","this","_baseUrl","_authorization","res","ok","json","Promise","reject","status","title","fetch","then","_checkStatus","pageNumber","id","Header","className","href","src","logoPath","alt","Card","props","movie","Poster","imageNotFoundPath","Title","onClick","openInfo","imdbID","Main","movies","onSubmit","showError","forward","back","setTitle","totalPages","e","preventDefault","name","value","onChange","target","placeholder","minLength","maxLength","required","autoFocus","type","map","item","Footer","Date","getFullYear","ModalWithInfo","onClose","isOpen","data","Director","Actors","Plot","LoadingSpinner","isLoading","App","React","useState","moviesList","setMoviesList","currentMovie","setCurrentMovie","isInfoModalOpen","setIsInfoModalOpen","isErrorShow","setIsErrorShow","setIsLoading","page","setPage","movieValue","setMovieValue","setTotalPages","getMovies","Response","Math","ceil","totalResults","Search","catch","err","console","log","getMoviesbyId","getMoviesPage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4b0b2d5.chunk.js","sourcesContent":["import './api.css';\r\n\r\n//Класс содержит всю логику для работы с API\r\nclass Api {\r\n  constructor(baseUrl, authorization) {\r\n    this._baseUrl = baseUrl;\r\n    this._authorization = authorization;\r\n  }\r\n\r\n  //проверка состояния промиса, чтобы не писать одно и то же сто тыщ раз\r\n  _checkStatus(res) {\r\n    if (res.ok) {\r\n      return res.json();\r\n    }\r\n    return Promise.reject(`Ошибка: ${res.status}`);\r\n  }\r\n\r\n  //получение информации о фильмах с сервера (дефолтная, первая страница, для кнопки 'search')\r\n  getMovies(title) {\r\n    return fetch(`${this._baseUrl}?s=${title}&apikey=${this._authorization}`)\r\n    .then(res => this._checkStatus(res));\r\n  }\r\n\r\n  getMoviesPage(title, pageNumber) {\r\n    return fetch(`${this._baseUrl}?s=${title}&apikey=${this._authorization}&page=${pageNumber}`)\r\n    .then(res => this._checkStatus(res));\r\n  }\r\n\r\n  //получение информации о фильмах с сервера с расширенной инфой\r\n  getMoviesbyId(id) {\r\n    return fetch(`${this._baseUrl}?i=${id}&apikey=${this._authorization}&plot=full`)\r\n    .then(res => this._checkStatus(res));\r\n  }\r\n\r\n\r\n};\r\n\r\nconst api = new Api(\"https://www.omdbapi.com/\", \"5cd3eeda\");\r\nexport default api;\r\n","export default __webpack_public_path__ + \"static/media/logo.460afd90.svg\";","//ФК, отвечающий за заголовок\r\nimport React from 'react';\r\nimport logoPath from '../images/logo.svg';\r\n\r\nfunction Header() {\r\n  return (\r\n    <>\r\n    <a className=\"header__link\" href=\"https://github.com/Ihomeeer\">\r\n      <img className=\"header__logo\" src={logoPath} alt=\"logo\" />\r\n    </a>\r\n      <h1 className=\"header__title\">Movie Search Engine</h1>\r\n      <p className=\"header__subtitle\">Search for your favourite movies by title</p>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Header;","export default __webpack_public_path__ + \"static/media/notFound.0d61eb5c.png\";","//ФК, возвращающий разметку карточки с фильмом\r\nimport React from 'react';\r\nimport imageNotFoundPath from \"../images/notFound.png\"\r\n\r\nfunction Card(props) {\r\n\r\n  function getMovieData() {\r\n    props.openInfo(props.movie.imdbID);\r\n  }\r\n\r\n  return (\r\n    <li key={props.movie.imdbID} className=\"card\" >\r\n      <img src={props.movie.Poster === \"N/A\" ? imageNotFoundPath : props.movie.Poster} alt={props.movie.Title} className=\"card__photo\" />\r\n      <h2 className=\"card__name\" id=\"cardName\">{props.movie.Title}</h2>\r\n      <button className=\"card__info\" onClick={getMovieData}>Learn more</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Card;","//ФК, отвечающий за рендер карточек с фильмами, и возвращающий разметку поисковой строки и карточек\r\nimport React from 'react';\r\nimport Card from './Card';\r\n\r\nfunction Main({ movies, onSubmit, openInfo, showError, forward, back, title, setTitle, totalPages }) {\r\n\r\n  function handleMovieChange(e) {\r\n    setTitle(e.target.value);\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    onSubmit(title);\r\n  }\r\n\r\n  return (\r\n    <main className=\"main\">\r\n      <form className=\"main__form\" onSubmit={handleSubmit}>\r\n        <input name=\"movieTitle\" className=\"main__search-input\" value={title} onChange={handleMovieChange} placeholder=\"Search for movies\" minLength=\"2\" maxLength=\"30\" required autoFocus></input>\r\n        <button name=\"submitButton\" className=\"main__search-button\" type=\"submit\">Search</button>\r\n      </form>\r\n      <p className={`main__error ${showError ? 'main__error_active' : \"\"}`}>No such movies found...</p>\r\n      <ul className=\"main__grid\">\r\n        {movies.map(item => {\r\n          return (\r\n            <Card movie={item} key={item.imdbID} openInfo={openInfo} />)\r\n        })}\r\n      </ul>\r\n      <nav className=\"main__pages\">\r\n        {totalPages > 1\r\n          &&\r\n          <>\r\n            <button className=\"main__nav-button main__nav-button_type_back\" onClick={() => { back(title) }}>&#129120;</button>\r\n            <button className=\"main__nav-button main__nav-button_type_forward\" onClick={() => { forward(title) }}>&#129122;</button>\r\n          </>\r\n        }\r\n      </nav>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default Main;\r\n\r\n","import React from 'react';\r\n\r\nfunction Footer() {\r\n  return (\r\n    <div>\r\n      <p className=\"footer__author\">&#169; {new Date().getFullYear()} MSE by Mikhail Kirichkov</p>\r\n      <p className=\"footer__gratitude\">Created with OMDb API</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Footer;","//ФК, отвечающий за рендер модалки с расширенной инфой\\\nimport React from 'react';\nimport imageNotFoundPath from \"../images/notFound.png\"\n\nfunction ModalWithInfo(props) {\n\n  return (\n    <div onClick={props.onClose} className={`info__wrapper ${props.isOpen ? 'info__wrapper_active' : \"\"}`}>\n      <div className=\"info\">\n        <img className=\"info__poster\" src={props.data.Poster === \"N/A\" ? imageNotFoundPath : props.data.Poster} alt={props.data.Title} />\n        <div className=\"info__text-section\">\n          <h2 className=\"info__caption\">Director:</h2>\n          <p name=\"infoDirector\" className=\"info__text\">{props.data.Director}</p>\n          <h2 className=\"info__caption\">Actors:</h2>\n          <p name=\"infoActors\" className=\"info__text\">{props.data.Actors}</p>\n          <h2 className=\"info__caption\">Description:</h2>\n          <p name=\"infoAbout\" className=\"info__text info__about\">{props.data.Plot}</p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ModalWithInfo;","//ФК, отвечающий за спиннер загрузки\r\nimport React from 'react';\r\n\r\nfunction LoadingSpinner({isLoading}) {\r\n\r\n  return (\r\n    <div className={`spinner__wrapper ${isLoading ? \"spinner__wrapper_active\" : \"\" }`}>\r\n      <div className=\"spinner\"></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LoadingSpinner;","import React from 'react';\r\nimport './App.css';\r\nimport api from '../utils/api';\r\nimport Header from './Header';\r\nimport Main from './Main';\r\nimport Footer from './Footer';\r\nimport ModalWithInfo from './ModalWithInfo';\r\nimport LoadingSpinner from './LoadingSpinner';\r\n\r\nfunction App() {\r\n  //Хук, отвечающий за список фильмов\r\n  const [moviesList, setMoviesList] = React.useState([]);\r\n  //Хук, отвечающий за конкретный фильм, инфа о котором пойдет в модалку\r\n  const [currentMovie, setCurrentMovie] = React.useState({});\r\n  //Хук, отвечающий за открытие модалки с инфой\r\n  const [isInfoModalOpen, setIsInfoModalOpen] = React.useState(false);\r\n  //Хук, отвечающий за показ ошибки, если по запросу ничего не найдено\r\n  const [isErrorShow, setIsErrorShow] = React.useState(false);\r\n  //Хук, отвечающий за спиннер с загрузкой\r\n  const [isLoading, setIsLoading] = React.useState(false);\r\n  //Хук для страниц\r\n  const [page, setPage] = React.useState(1);\r\n  const [movieValue, setMovieValue] = React.useState(\"\");\r\n  const [totalPages, setTotalPages] = React.useState(null);\r\n\r\n  //Функция отвечает за отправку данных из инпута с названием фильма\r\n  function handleSearch(title) {\r\n    setIsLoading(true);\r\n    api.getMovies(title)\r\n      .then(res => {\r\n        if (res.Response === \"True\") {\r\n          const totalPages = Math.ceil(+res.totalResults / 10);\r\n          setTotalPages(totalPages);\r\n          setMoviesList(res.Search);\r\n          setIsErrorShow(false);\r\n          setIsLoading(false);\r\n          setPage(1);\r\n        }\r\n        else {\r\n          setMoviesList([]);\r\n          setIsErrorShow(true);\r\n          setIsLoading(false);\r\n          setPage(1);\r\n        }\r\n      })\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  function forwardClick(title) {\r\n    if (page && page <= totalPages) {\r\n      setIsLoading(true);\r\n      page && api.getMoviesPage(title, page + 1)\r\n        .then(res => {\r\n          if (res.Response === \"True\") {\r\n            setMoviesList(res.Search);\r\n            setIsErrorShow(false);\r\n            setIsLoading(false);\r\n            setPage(page + 1)\r\n          }\r\n          else {\r\n            setMoviesList([]);\r\n            setIsErrorShow(true);\r\n            setIsLoading(false);\r\n          }\r\n        })\r\n        .catch(err => console.log(err));\r\n    } else {\r\n      return\r\n    }\r\n  }\r\n\r\n  function backClick(title) {\r\n    if (page && page > 1) {\r\n      setIsLoading(true);\r\n\r\n      page && api.getMoviesPage(title, page - 1)\r\n        .then(res => {\r\n          if (res.Response === \"True\") {\r\n            setMoviesList(res.Search);\r\n            setIsErrorShow(false);\r\n            setIsLoading(false);\r\n            setPage(page - 1)\r\n          }\r\n          else {\r\n            setMoviesList([]);\r\n            setIsErrorShow(true);\r\n            setIsLoading(false);\r\n          }\r\n        })\r\n        .catch(err => console.log(err));\r\n    } else {\r\n      return\r\n    }\r\n  }\r\n\r\n  //Функция делает запрос к АПИ по айди фильма, чтобы получить пул с расширенной инфой\r\n  function handleChoseMovie(id) {\r\n    api.getMoviesbyId(id)\r\n      .then(res => {\r\n        setCurrentMovie(res);\r\n        setIsInfoModalOpen(true);\r\n      })\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  //Закрытие модалки с инфой\r\n  function handleCloseModal() {\r\n    setIsInfoModalOpen(false);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n\r\n      <Header />\r\n\r\n      {\r\n        isInfoModalOpen\r\n          ?\r\n          <ModalWithInfo\r\n            data={currentMovie}\r\n            isOpen={isInfoModalOpen}\r\n            onClose={handleCloseModal}\r\n          />\r\n          :\r\n          <>\r\n            {isLoading\r\n              ?\r\n              <LoadingSpinner\r\n                isLoading={isLoading}\r\n              />\r\n              :\r\n              <Main\r\n                onSubmit={handleSearch}\r\n                movies={moviesList}\r\n                openInfo={handleChoseMovie}\r\n                showError={isErrorShow}\r\n                forward={forwardClick}\r\n                back={backClick}\r\n                title={movieValue}\r\n                setTitle={setMovieValue}\r\n                totalPages={totalPages}\r\n              />\r\n            }\r\n          </>\r\n      }\r\n\r\n      <Footer />\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}